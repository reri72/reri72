* 여러 프로세스 간의 동기화 및 자원 공유를 관리하는데 사용되는 기법

* 특히 공유 자원의 접근을 제어하는에 유용

* 두 가지 유형 존재
 (1) 이진 세마포어
    > 0과 1로만 설정되는 세마포어
    > 임계 영역에 대한 접근을 제어하는 데 사용 됨 (mutex와 유사)
 (2) 카운팅 세마포어
    > 0 이상의 정수로 설정될 수 있는 세마포어
    > 여러 개의 자원을 관리할 수 있음

* 세마포어의 동작
 - P (proberen; 기다림)
    > 세마포어의 값을 1 감소시키는 연산.
    > 세마포어 값이 0 이라면 이 연산을 수행한 프로세스는 대기
 - V (verhogen; 신호)
    > 세마포어의 값을 1 증가시키는 연산.
    > 기다리고 있던 프로세스가 있다면 그 프로세스 중 하나가 세마포어 획득

* 종류
 1) posix
   파일 또는 메모리 기반으로 관리하고, 실행이 빠름
   1.1. 메모리 기반  (비공유, sem_init())
    > thread 간 사용 가능
    > sem_init() 으로 메모리에서 세마포어를 초기화
    > sem_wait() 과 sem_post() 로 동기화
   1.2. 이름 기반 (공유가능, sem_open())
    > process 간 공유가 가능 (/dev/shm 에 저장 됨)
    > sem_open() 으로 세마포어 생성
    > sem_close() 및 sem_unlink() 로 해제
   
 2) system v
   posix semaphore에 비해 느림
   2.2. 커널 내부에서 관리
    > process간 사용 가능
    > 오래된 시스템에서 기존 코드 유지보수가 필요하거나
      여러 프로세스가 공유하는 복잡한 동기화가 필요할 때 사용